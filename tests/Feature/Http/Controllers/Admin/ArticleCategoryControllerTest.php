<?php

namespace Tests\Feature\Http\Controllers\Admin;

use App\Models\Articles\ArticleCategory;
use App\Models\Articles\ArticleCategoryDetail;
use App\Models\Language\Language;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
//use Faker\Factory as Faker;

/**
 * @see \App\Http\Controllers\Admin\ArticleCategoryController
 */
class ArticleCategoryControllerTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    public function setUp(): void
    {
        parent::setUp();
        $this->seed();
//        $this->faker = Faker::create();

    }

    /**
     * @test
     */
    public function auto_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();

        $response = $this->actingAs($user)->get(route('article.auto'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();

        $response = $this->actingAs($user)->get(route('category.create'));

        $response->assertOk();
        $response->assertViewIs('admin.blog.categories.create');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $category = ArticleCategory::first();
        $response = $this->actingAs($user)->delete(route('category.destroy', ['category' => $category]));

        $response->assertRedirect(route('category.index'));
        $this->assertSoftDeleted($category);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $category = Helpers::createArticleCategory();
        $response = $this->actingAs($user)->get(route('category.edit', ['category' => $category]));

        $response->assertOk();
        $response->assertViewIs('admin.blog.categories.edit');
        $response->assertViewHas('category');
        $response->assertSee($category->detail->name);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();

        $response = $this->actingAs($user)->get(route('category.index'));

        $response->assertOk();
        $response->assertViewIs('admin.blog.categories.index');
        $response->assertViewHas('categories');
        foreach (ArticleCategory::all() as $category) {
            $response->assertSee($category->detail->name);
        }

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $data = [];
        foreach (Language::all() as $language) {
            $data['name-'. $language->id] = $this->faker->word . $this->faker->word;
        }
        $response = $this->actingAs($user)->post(route('category.store'), $data);

        $response->assertRedirect(route('category.index'));
        foreach (Language::all() as $language) {
            $this->assertDatabaseHas('article_categories_details', ['name' => $data['name-'. $language->id]]);
        }
    }

    /**
     * @test
     */
    public function store_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Admin\ArticleCategoryController::class,
            'store',
            \App\Http\Requests\Article\ArticleCategory\StoreRequest::class
        );
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $category = Helpers::createArticleCategory();
        $data = [];
        foreach (Language::all() as $language) {
            $data['name-'. $language->id] = $this->faker->word . $this->faker->word;
        }
        $response = $this->actingAs($user)->put(route('category.update', ['category' => $category]), $data);

        $response->assertRedirect(route('category.index'));
//        $category->refresh();
        foreach (Language::all() as $language) {
            $this->assertDatabaseHas('article_categories_details', ['name' => $data['name-'. $language->id]]);
        }
        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Admin\ArticleCategoryController::class,
            'update',
            \App\Http\Requests\Article\ArticleCategory\UpdateRequest::class
        );
    }

    // test cases...
}
