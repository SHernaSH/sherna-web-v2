<?php

namespace Tests\Feature\Http\Controllers\Admin;

use App\Models\Articles\Article;
use App\Models\Articles\ArticleCategory;
use App\Models\Articles\ArticleCategoryDetail;
use App\Models\Articles\ArticleText;
use App\Models\Language\Language;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use Faker\Factory as Faker;

/**
 * @see \App\Http\Controllers\Admin\ArticleController
 */
class ArticleControllerTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    public function setUp(): void
    {
        parent::setUp();
        $this->seed();
        $this->faker = Faker::create();

    }

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();

        $response = $this->actingAs($user)->get(route('article.create'));

        $response->assertOk();
        $response->assertViewIs('admin.blog.articles.create');
        $response->assertViewHas('category');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function create_with_category_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $category = Helpers::createArticleCategory();

        $response = $this->actingAs($user)->get(route('article.category', ['category' => $category->detail->name]));

        $response->assertOk();
        $response->assertViewIs('admin.blog.articles.create');
        $response->assertViewHas('category');
        $response->assertSee($category->detail->name);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $article = Article::find(factory(ArticleText::class)->create()->article_id);

        $response = $this->actingAs($user)->delete(route('article.destroy', ['article' => $article]));

        $response->assertRedirect(route('article.index'));
        $this->assertSoftDeleted($article);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $article = Article::find(factory(ArticleText::class)->create()->article_id);
        $text = factory(ArticleText::class)->make();
        $text->language_id = 2;
        $text->page()->associate($article);
        $text->save();
        $response = $this->actingAs($user)->get(route('article.edit', ['article' => $article]));

        $response->assertOk();
        $response->assertViewIs('admin.blog.articles.edit');
        $response->assertViewHas('article');
        $response->assertSee($article->name);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();

        $response = $this->actingAs($user)->get(route('article.index'));

        $response->assertOk();
        $response->assertViewIs('admin.blog.articles.index');
        $response->assertViewHas('articles');
        foreach (Article::public()->get() as $article) {
            $response->assertSee($article->url);
        }
        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function public_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $article = Article::find(factory(ArticleText::class)->create()->article_id);
        $response = $this->actingAs($user)->get(route('article.public', ['article' => $article]));

        $response->assertStatus(302);
        $response->assertRedirect(route('article.index'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $data = [
            'url' => $this->faker->word . $this->faker->word,
        ];
        foreach (Language::all() as $language) {
            $data['name-' . $language->id] = $this->faker->word . $this->faker->word;
            $data['description-' . $language->id] = $this->faker->text;
            $data['content-' . $language->id] = $this->faker->text . $this->faker->text;
        }
        $response = $this->actingAs($user)->post(route('article.store'), $data);

        $response->assertRedirect(route('article.index'));
        $this->assertDatabaseHas('articles', ['url' => $data['url']]);
        foreach (Language::all() as $language) {
            $this->assertDatabaseHas('articles_texts', ['content' => $data['content-' . $language->id]]);
        }
        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Admin\ArticleController::class,
            'store',
            \App\Http\Requests\Article\StoreRequest::class
        );
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $article = Helpers::createArticle();
        $data = [

        ];
        foreach (Language::all() as $language) {
            $data['name-' . $language->id] = $this->faker->word . $this->faker->word;
            $data['description-' . $language->id] = $this->faker->text;
            $data['content-' . $language->id] = $this->faker->text . $this->faker->text;
        }
        $response = $this->actingAs($user)->put(route('article.update', ['article' => $article]), $data);

        $response->assertRedirect(route('article.index'));
        $response->assertStatus(302);
        foreach (Language::all() as $language) {
            $this->assertDatabaseHas('articles_texts', ['content' => $data['content-' . $language->id]]);
        }
        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Admin\ArticleController::class,
            'update',
            \App\Http\Requests\Article\UpdateRequest::class
        );
    }

    // test cases...
}
