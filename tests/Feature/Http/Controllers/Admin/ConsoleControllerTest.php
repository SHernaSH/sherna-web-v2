<?php

namespace Tests\Feature\Http\Controllers\Admin;

use App\Models\Consoles\Console;
use App\Models\Consoles\ConsoleType;
use App\Models\Locations\Location;
use App\Models\Locations\LocationStatus;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\Admin\ConsoleController
 */
class ConsoleControllerTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    public function setUp(): void
    {
        parent::setUp();
        $this->seed();
    }

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();

        $response = $this->actingAs($user)->get(route('console.create'));

        $response->assertOk();
        $response->assertViewIs('admin.consoles.create');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $console = factory(Console::class)->create();
        $response = $this->actingAs($user)->get(route('console.edit', ['console' => $console]));

        $response->assertOk();
        $response->assertViewIs('admin.consoles.edit');
        $response->assertViewHas('console');
        $response->assertSee($console->name);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();

        $response = $this->actingAs($user)->get(route('console.index'));

        $response->assertOk();
        $response->assertViewIs('admin.consoles.index');
        $response->assertViewHas('consoles');
        $response->assertViewHas('consoleTypes');
        foreach (Console::all() as $console) {
            $response->assertSee($console->name);
        }
        foreach (ConsoleType::all() as $consoleType) {
            $response->assertSee($consoleType->name);
        }

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $type = factory(ConsoleType::class)->create();
        $location = factory(Location::class)->create();
        $name = $this->faker->word . $this->faker->word;
        $response = $this->actingAs($user)->post(route('console.store'), [
            'name' => $name,
            'console_type_id' => $type->id,
            'location_id' => $location->id,
        ]);
        $response->assertStatus(302);
        $response->assertRedirect(route('console.index'));
        $this->assertDatabaseHas('consoles', ['name' => $name]);
        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Admin\ConsoleController::class,
            'store',
            \App\Http\Requests\Consoles\StoreRequest::class
        );
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $console = factory(Console::class)->create();
        $name = $this->faker->word . $this->faker->word;
        $response = $this->actingAs($user)->put(route('console.update', ['console' => $console]), [
            'name' => $name,
            'console_type_id' => $console->console_type_id,
            'location_id' => $console->location_id,
        ]);
        $response->assertStatus(302);
        $response->assertRedirect(route('console.index'));
        $this->assertInstanceOf(Console::class, $console);
        $console->refresh();
        $this->assertEquals($name, $console->name);
        $this->assertDatabaseHas('consoles', ['id' => $console->id, 'name' => $name]);
        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Admin\ConsoleController::class,
            'update',
            \App\Http\Requests\Consoles\UpdateRequest::class
        );
    }

    // test cases...
}
