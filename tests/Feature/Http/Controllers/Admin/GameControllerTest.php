<?php

namespace Tests\Feature\Http\Controllers\Admin;

use App\Models\Consoles\Console;
use App\Models\Games\Game;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\Admin\GameController
 */
class GameControllerTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    public function setUp(): void
    {
        parent::setUp();
        $this->seed();
    }

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();

        $response = $this->actingAs($user)->get(route('game.create'));

        $response->assertOk();
        $response->assertViewIs('admin.games.create');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $game = factory(Game::class)->create();

        $response = $this->actingAs($user)->delete(route('game.destroy', ['game' => $game]));

        $response->assertStatus(302);
        $response->assertRedirect(route('game.index'));
        $this->assertSoftDeleted($game);

    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $game = factory(Game::class)->create();

        $response = $this->actingAs($user)->get(route('game.edit', ['game' => $game]));

        $response->assertOk();
        $response->assertViewIs('admin.games.edit');
        $response->assertViewHas('game');
        $response->assertSee($game->name);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();

        $response = $this->actingAs($user)->get(route('game.index'));

        $response->assertOk();
        $response->assertViewIs('admin.games.index');
        $response->assertViewHas('games');
        foreach (Game::all() as $game) {
            $response->assertSee($game->name);
        }

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $console = factory(Console::class)->create();
        $data = [
            'name' => $this->faker->name,
            'possible_players' => abs($this->faker->randomNumber()),
            'console_id' => $console->id,
            'serial_id' => $this->faker->word,
            'inventory_id' => $this->faker->word,
        ];
        $response = $this->actingAs($user)->post(route('game.store'), $data);

        $response->assertRedirect(route('game.index'));
        $this->assertDatabaseHas('games', ['name' => $data['name']]);
        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Admin\GameController::class,
            'store',
            \App\Http\Requests\Games\StoreRequest::class
        );
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $game = factory(Game::class)->create();

        $data = [
            'name' => $this->faker->name,
            'possible_players' => $this->faker->randomNumber(),
            'console_id' => $game->console_id,
            'serial_id' => $game->serial_id,
            'inventory_id' => $game->inventory_id,
        ];
        $response = $this->actingAs($user)->put(route('game.update', ['game' => $game]), $data);

        $response->assertStatus(302);
        $response->assertRedirect(route('game.index'));
        $this->assertInstanceOf(Game::class, $game);
        $game->refresh();
        $this->assertEquals($data['name'], $game->name);
        $this->assertEquals($data['possible_players'], $game->possible_players);
        $this->assertDatabaseHas('games', [
            'id' => $game->id, 'name' => $data['name'], 'possible_players' => $data['possible_players']
        ]);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Admin\GameController::class,
            'update',
            \App\Http\Requests\Games\UpdateRequest::class
        );
    }

    // test cases...
}
