<?php

namespace Tests\Feature\Http\Controllers\Admin;

use App\Models\Articles\ArticleCategory;
use App\Models\Inventory\InventoryCategory;
use App\Models\Language\Language;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\Admin\InventoryCategoryController
 */
class InventoryCategoryControllerTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    public function setUp(): void
    {
        parent::setUp();
        $this->seed();
    }

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();

        $response = $this->actingAs($user)->get(route('inventory.category.create'));

        $response->assertOk();
        $response->assertViewIs('admin.inventory.category.create');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $category = Helpers::createInventoryCategory();
        $response = $this->actingAs($user)->delete(route('inventory.category.destroy', ['category' => $category->id]));

        $response->assertRedirect(route('inventory.category.index'));
        foreach (Language::all() as $language) {
            $this->assertSoftDeleted('inventory_categories', ['id' => $category->id, 'language_id' => $language->id]);
        }

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $category = Helpers::createInventoryCategory();
        $response = $this->actingAs($user)->get(route('inventory.category.edit', ['category' => $category->id]));

        $response->assertOk();
        $response->assertViewIs('admin.inventory.category.edit');
        $response->assertViewHas('inventoryCategory');
        $response->assertSee($category->name);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();

        $response = $this->actingAs($user)->get(route('inventory.category.index'));

        $response->assertOk();
        $response->assertViewIs('admin.inventory.category.index');
        $response->assertViewHas('inventoryCategories');
        foreach (InventoryCategory::all() as $category) {
            $response->assertSee($category->name);
        }

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();

        $data = [];
        foreach (Language::all() as $language) {
            $data['name-' . $language->id] = $this->faker->name;
        }
        $response = $this->actingAs($user)->post(route('inventory.category.store'), $data);

        $response->assertStatus(302);
        $response->assertRedirect(route('inventory.category.index'));
        foreach (Language::all() as $language) {
            $this->assertDatabaseHas('inventory_categories', [
                'name' => $data['name-' . $language->id],
                'language_id' => $language->id,
            ]);
        }

    }

    /**
     * @test
     */
    public function store_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Admin\InventoryCategoryController::class,
            'store',
            \App\Http\Requests\Inventory\Category\StoreRequest::class
        );
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $category = Helpers::createInventoryCategory();

        $data = [];
        foreach (Language::all() as $language) {
            $data['name-' . $language->id] = $this->faker->name;
        }

        $response = $this->actingAs($user)->put(route('inventory.category.update', ['category' => $category->id]), $data);

        $response->assertRedirect(route('inventory.category.index'));

        $response->assertStatus(302);
        $response->assertRedirect(route('inventory.category.index'));
        foreach (Language::all() as $language) {
            $this->assertDatabaseHas('inventory_categories', [
                'name' => $data['name-' . $language->id],
                'language_id' => $language->id,
            ]);
        }
    }

    /**
     * @test
     */
    public function update_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Admin\InventoryCategoryController::class,
            'update',
            \App\Http\Requests\Inventory\Category\UpdateRequest::class
        );
    }

    // test cases...
}
