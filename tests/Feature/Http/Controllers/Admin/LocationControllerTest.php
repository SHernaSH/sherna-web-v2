<?php

namespace Tests\Feature\Http\Controllers\Admin;

use App\Models\Language\Language;
use App\Models\Locations\Location;
use App\Models\Locations\LocationStatus;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\Admin\LocationController
 */
class LocationControllerTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    public function setUp(): void
    {
        parent::setUp();
        $this->seed();
    }

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();

        $response = $this->actingAs($user)->get(route('location.create'));

        $response->assertOk();
        $response->assertViewIs('admin.locations.create');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $location = Helpers::createLocation();
        $response = $this->actingAs($user)->delete(route('location.destroy', ['location' => $location->id]));

        $response->assertStatus(302);
        $response->assertRedirect(route('location.index'));
        foreach (Language::all() as $language) {
            $this->assertSoftDeleted('locations', [
                'id' => $location->id,
                'language_id' => $language->id,
            ]);
        }

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $location = Helpers::createLocation();

        $response = $this->actingAs($user)->get(route('location.edit', ['location' => $location->id]));

        $response->assertOk();
        $response->assertViewIs('admin.locations.edit');
        $response->assertViewHas('location');
        $response->assertSee($location->name);
        $response->assertSee($location->status->name);

    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();

        $response = $this->actingAs($user)->get(route('location.index'));

        $response->assertOk();
        $response->assertViewIs('admin.locations.index');
        $response->assertViewHas('locations');
        $response->assertViewHas('statuses');
        foreach (Location::all() as $location) {
            $response->assertSee($location->name);
        }
        foreach (LocationStatus::all() as $status) {
            $response->assertSee($status->name);
        }
        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $status = Helpers::createLocationStatus();
        $data = [
            'location_uid' => $this->faker->word,
            'reader_uid' => $this->faker->word,
            'status' => $status->id,
        ];
        foreach (Language::all() as $language) {
            $data['name-' . $language->id] = $this->faker->name;
        }
        $response = $this->actingAs($user)->post(route('location.store'), $data);

        $response->assertStatus(302);
        $response->assertRedirect(route('location.index'));
        foreach (Language::all() as $language) {
            $this->assertDatabaseHas('locations', [
                'name' => $data['name-' . $language->id],
                'language_id' => $language->id,
                'status_id' => $status->id,
            ]);
        }

    }

    /**
     * @test
     */
    public function store_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Admin\LocationController::class,
            'store',
            \App\Http\Requests\Locations\StoreRequest::class
        );
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $location = Helpers::createLocation();
        $data = [
            'location_uid' => $location->location_uid,
            'reader_uid' => $location->reader_uid,
            'status' => $location->status_id,
        ];
        foreach (Language::all() as $language) {
            $data['name-' . $language->id] = $this->faker->name;
        }
        $response = $this->actingAs($user)->put(route('location.update', ['location' => $location->id]), $data);

        $response->assertStatus(302);
        $response->assertRedirect(route('location.index'));
        foreach (Language::all() as $language) {
            $this->assertDatabaseHas('locations', [
                'name' => $data['name-' . $language->id],
                'language_id' => $language->id,
                'location_uid' => $location->location_uid,
                'reader_uid' => $location->reader_uid,
                'status_id' => $location->status_id,
            ]);
        }

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Admin\LocationController::class,
            'update',
            \App\Http\Requests\Locations\UpdateRequest::class
        );
    }

    // test cases...
}
