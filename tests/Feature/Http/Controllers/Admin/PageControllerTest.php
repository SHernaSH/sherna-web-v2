<?php

namespace Tests\Feature\Http\Controllers\Admin;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\Admin\PageController
 */
class PageControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->delete(route('page.destroy', ['page' => $page, 'type' => $type]));

        $response->assertRedirect(back());
        $this->assertDeleted($page);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('page.edit', ['page' => $page, 'type' => $type]));

        $response->assertRedirect(back());

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function navigation_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('page.navigation'));

        $response->assertOk();
        $response->assertViewIs('admin.pages.index');
        $response->assertViewHas('pages');
        $response->assertViewHas('type');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function public_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('page.public', ['page' => $page, 'type' => $type]));

        $response->assertRedirect(back());

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function standalone_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('page.standalone'));

        $response->assertOk();
        $response->assertViewIs('admin.pages.index');
        $response->assertViewHas('pages');
        $response->assertViewHas('type');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function subnavigation_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('page.subnavigation'));

        $response->assertOk();
        $response->assertViewIs('admin.pages.index');
        $response->assertViewHas('pages');
        $response->assertViewHas('type');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->put(route('page.update', ['page' => $page, 'type' => $type]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('page.standalone'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Admin\PageController::class,
            'update',
            \App\Http\Requests\Pages\UpdateRequest::class
        );
    }

    // test cases...
}
