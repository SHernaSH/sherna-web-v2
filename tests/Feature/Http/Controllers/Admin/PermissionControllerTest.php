<?php

namespace Tests\Feature\Http\Controllers\Admin;

use App\Models\Permissions\Permission;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\Admin\PermissionController
 */
class PermissionControllerTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    public function setUp(): void
    {
        parent::setUp();
        $this->seed();
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $permission = factory(Permission::class)->create();
        $response = $this->actingAs($user)->delete(route('permission.destroy', ['permission' => $permission]));

        $response->assertRedirect(route('permission.index'));
        $this->assertDeleted($permission);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $permission = factory(Permission::class)->create();
        $response = $this->actingAs($user)->get(route('permission.edit', ['permission' => $permission]));

        $response->assertOk();
        $response->assertViewIs('admin.permissions.edit');
        $response->assertViewHas('permission');
        $response->assertSee($permission->name);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function generate_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();

        $response = $this->actingAs($user)->get(route('permission.generate'));

        $response->assertStatus(302);
        $response->assertRedirect(route('permission.index'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();

        $response = $this->actingAs($user)->get(route('permission.index'));

        $response->assertOk();
        $response->assertViewIs('admin.permissions.index');
        $response->assertViewHas('permissions');
        $index = 1;
        $permissions = Permission::latest()->paginate();
        foreach ($permissions as $permission) {
            $response->assertSee($permission->method);
            $response->assertSee($permission->name);
            $response->assertSee($permission->controller);
            $index++;
            if($index > $permissions->perPage())
                break;
        }

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $permission = factory(Permission::class)->create();
        $data = [
            'name' => $this->faker->name,
        ];
        $response = $this->actingAs($user)->put(route('permission.update', ['permission' => $permission]), $data);

        $response->assertRedirect(route('permission.index'));
        $this->assertDatabaseHas('permissions', ['name' => $data['name']]);
        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Admin\PermissionController::class,
            'update',
            \App\Http\Requests\Permissions\UpdateRequest::class
        );
    }

    // test cases...
}
