<?php

namespace Tests\Feature\Http\Controllers\Admin;

use App\Models\Reservations\Reservation;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\Admin\ReservationController
 */
class ReservationControllerTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    public function setUp(): void
    {
        parent::setUp();
        $this->seed();
    }

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();

        $response = $this->actingAs($user)->get(route('admin.reservation.create'));

        $response->assertOk();
        $response->assertViewIs('admin.reservations.create');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $reservation = factory(Reservation::class)->create();
        $response = $this->actingAs($user)->delete(route('admin.reservation.destroy', ['reservation' => $reservation]));

        $response->assertRedirect(route('admin.reservation.index'));
        $this->assertSoftDeleted($reservation);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $reservation = factory(Reservation::class)->create();
        $response = $this->actingAs($user)->get(route('admin.reservation.edit', ['reservation' => $reservation]));

        $response->assertOk();
        $response->assertViewIs('admin.reservations.edit');
        $response->assertViewHas('reservation');
        $response->assertSee($reservation->user->id);
        $response->assertSee($reservation->start_at->format('d.m.Y h:i'));
        $response->assertSee($reservation->end_at->format('d.m.Y h:i'));
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();

        $response = $this->actingAs($user)->get(route('admin.reservation.index'));

        $response->assertOk();
        $response->assertViewIs('admin.reservations.index');
        $response->assertViewHas('reservations');
        foreach (Reservation::all() as $reservation) {
            $response->assertSee($reservation->user->name);
            $response->assertSee($reservation->start_at->isoFormat('LLL'));
            $response->assertSee($reservation->end_at->isoFormat('LLL'));
        }
        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $location = Helpers::createLocation();
        $data = [
            'location_id' => $location->id,
            'visitors_count' => $this->faker->randomNumber(),
            'from_date' => Carbon::now()->addHours(5)->format('d.m.Y H:i'),
            'to_date' => Carbon::now()->addHours(10)->format('d.m.Y H:i'),
        ];
        $response = $this->actingAs($user)->post(route('admin.reservation.store'), $data);

        $response->assertRedirect(route('admin.reservation.index'));
        $this->assertDatabaseHas('reservations', [
            'location_id' => $location->id,
            'visitors_count' => $data['visitors_count'],
            'start_at' => Carbon::createFromFormat('d.m.Y H:i', $data['from_date'])->format('Y-m-d H:i:s'),
            'end_at' => Carbon::createFromFormat('d.m.Y H:i', $data['to_date'])->format('Y-m-d H:i:s'),
        ]);
        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Admin\ReservationController::class,
            'store',
            \App\Http\Requests\Reservations\StoreRequest::class
        );
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $reservation = factory(Reservation::class)->create();

        $data = [
            'location_id' => $reservation->location_id,
            'visitors_count' => $this->faker->randomNumber(),
            'from_date' => Carbon::now()->addHours(5)->format('d.m.Y H:i'),
            'to_date' => Carbon::now()->addHours(10)->format('d.m.Y H:i'),
        ];
        $response = $this->actingAs($user)->put(route('admin.reservation.update', ['reservation' => $reservation]), $data);

        $response->assertRedirect(route('admin.reservation.index'));
        $this->assertDatabaseHas('reservations', [
            'visitors_count' => $data['visitors_count'],
            'start_at' => Carbon::createFromFormat('d.m.Y H:i', $data['from_date'])->format('Y-m-d H:i:s'),
            'end_at' => Carbon::createFromFormat('d.m.Y H:i', $data['to_date'])->format('Y-m-d H:i:s'),
        ]);
        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Admin\ReservationController::class,
            'update',
            \App\Http\Requests\Reservations\UpdateRequest::class
        );
    }

    // test cases...
}
