<?php

namespace Tests\Feature\Http\Controllers\Admin;

use App\Models\Roles\Role;
use App\Models\Users\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Str;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\Admin\UserController
 */
class UserControllerTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    public function setUp(): void
    {
        parent::setUp();
        $this->seed();
    }

    /**
     * @test
     */
    public function auto_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();

        $response = $this->actingAs($user)->get(route('user.auto'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function ban_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $ban = $user->banned;
        $response = $this->actingAs($user)->get(route('user.ban', ['user' => $user]));

        $response->assertRedirect(route('user.index'));
        $user->refresh();
        $this->assertEquals(!$ban, $user->banned);
        $this->assertDatabaseHas('users', [
            'id' => $user->id,
            'banned' => !$ban,
        ]);
        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();

        $response = $this->actingAs($user)->get(route('user.index'));

        $response->assertOk();
        $response->assertViewIs('admin.users.index');
        $response->assertViewHas('users');
        $response->assertViewHas('filters');
        foreach (User::all() as $user) {
            $response->assertSee($user->name);
            $response->assertSee($user->surname);
            $response->assertSee($user->email);
        }

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_filter_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $letter = $this->faker->randomLetter;
        $response = $this->actingAs($user)->post(route('user.filter'), [
            'name' => $letter,
        ]);

        $response->assertOk();
        $response->assertViewIs('admin.users.index');
        $response->assertViewHas('users');
        $response->assertViewHas('filters');
        foreach (User::where('name', 'LIKE', '%'. $letter . '%') as $user) {
                $response->assertSee($user->name);
                $response->assertSee($user->surname);
                $response->assertSee($user->email);
                $response->assertDontSee('mailto:'.$user->email);
        }
        foreach (User::where('name', 'NOT LIKE', '%'. $letter . '%') as $user) {
            $response->assertDontSee('mailto:'.$user->email);
        }

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_role_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $role = factory(Role::class)->create();
        $response = $this->actingAs($user)->put(route('user.role', ['user' => $user]), [
           'role' => $role->id,
        ]);

        $response->assertRedirect(route('user.index'));
        $user->refresh();
        $this->assertEquals($role->id, $user->role_id);
        $this->assertDatabaseHas('users', [
            'id' => $user->id, 'role_id' => $role->id,
        ]);
        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function updaterole_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Admin\UserController::class,
            'updateRole',
            \App\Http\Requests\Users\UpdateRequest::class
        );
    }

    // test cases...
}
