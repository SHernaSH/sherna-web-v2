<?php

namespace Tests\Feature\Http\Controllers\Client;

use App\Models\Articles\Article;
use App\Models\Articles\ArticleCategory;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\Client\BlogController
 */
class BlogControllerTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    public function setUp(): void
    {
        parent::setUp();
        $this->seed();
    }

    /**
     * @test
     */
    public function categories_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('blog.categories'));

        $response->assertOk();
        $response->assertViewIs('client.blog.categories');
        $response->assertViewHas('categories');
        foreach (ArticleCategory::all() as $category) {
            $response->assertSee($category->detail->name);
        }

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('blog'));

        $response->assertOk();
        $response->assertViewIs('client.blog.index');
        $response->assertViewHas('articles')
        ;
        foreach (Article::all() as $article) {
            $response->assertSee($article->url);
        }

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');
        $articles = Article::all();
        $article = $articles[rand(0, $articles->count()-1)];
        $response = $this->get(route('blog.show', ['article' => $article]));

        $response->assertOk();
        $response->assertViewIs('client.blog.show');
        $response->assertViewHas('article');
        $response->assertSee($article->text->title);
//        $clear = trim(preg_replace('/ +/', ' ', preg_replace('/[^A-Za-z0-9 ]/', ' ', urldecode(html_entity_decode(strip_tags($article->text->content))))));
        $response->assertSeeText(strip_tags($article->text->content));

        // TODO: perform additional assertions
    }

    // test cases...
}
