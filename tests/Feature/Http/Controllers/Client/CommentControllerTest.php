<?php

namespace Tests\Feature\Http\Controllers\Client;

use App\Models\Articles\Article;
use App\Models\Articles\ArticleText;
use App\Models\Comments\Comment;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Session;
use Tests\TestCase;
use Faker\Factory as Faker;

/**
 * @see \App\Http\Controllers\Client\CommentController
 */
class CommentControllerTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    public function setUp(): void
    {
        parent::setUp();
        $this->seed();
        $this->faker = Faker::create();
//        Session::start();
//        Session::put(['_token' => csrf_token()]);
    }


    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $comment = factory(Comment::class)->create();
        $response = $this->actingAs($user)->delete(route('comment.destroy', ['comment' => $comment]), [

        ]);

        $response->assertStatus(302);
        $this->assertSoftDeleted($comment);
        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $article = Article::find(factory(ArticleText::class)->make()->article_id);
        $comment = factory(Comment::class)->make();
        $article->comments()->save($comment);
        $comment->save();
        $body = $this->faker->text;
        $response = $this->actingAs($user)->put(route('comment.update', ['comment' => $comment]), [
            'comment_body' => $body,
        ]);

        $response->assertStatus(302);
        $comment->refresh();
        $this->assertInstanceOf(Comment::class, $comment);
        $this->assertEquals($body, $comment->body);
        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function reply_store_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $article = Article::find(factory(ArticleText::class)->make()->article_id);
        $comment = factory(Comment::class)->make();
        $article->comments()->save($comment);
        $comment->save();
        $body = $this->faker->text;
        $response = $this->actingAs($user)->post(route('comment.reply'), [
            'comment_body' => $body,
            'comment_id' => $comment->id,
            'article_id'=> $article->id,
        ]);
        $this->assertDatabaseHas('comments', [
            'body' => $body,
            'parent_id' => $comment->id,
        ]);
        $response->assertStatus(302);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $article = Article::find(factory(ArticleText::class)->make()->article_id);
        $body = $this->faker->text;

        $response = $this->actingAs($user)->post(route('comment.store', ['article' => $article]), [
            'comment_body' => $body,
        ]);

        $response->assertRedirect(url('/'));
        $this->assertDatabaseHas('comments', [
            'body' => $body,
            'user_id' => $user->id,
        ] );
        // TODO: perform additional assertions
    }

    // test cases...
}
