<?php

namespace Tests\Feature\Http\Controllers\Client;

use App\Models\Reservations\Reservation;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\Client\UserReservationController
 */
class UserReservationControllerTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    public function setUp(): void
    {
        parent::setUp();
        $this->seed();
    }
    /**
     * @test
     */
    public function delete_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $reservation = factory(Reservation::class)->create();
        $response = $this->actingAs($user)->delete(route('user.reservations.delete', ['reservation' => $reservation]));

        $response->assertRedirect(route('user.reservations'));
        $this->assertSoftDeleted($reservation);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function get_reservation_i_c_s_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $reservation = factory(Reservation::class)->create();

        $response = $this->actingAs($user)->get(route('user.ics', ['reservation' => $reservation]));

        $response->assertOk();
        $response->assertSee('LOCATION:'. $reservation->location->name);
        $response->assertSee('DESCRIPTION:Rezervace pro: '. $reservation->user->name);
        $response->assertSee('DTSTART:'. $reservation->start_at->format('Ymd'). 'T' . $reservation->start_at->format('Hi00'));
        $response->assertSee('DTEND:'. $reservation->end_at->format('Ymd'). 'T' . $reservation->end_at->format('Hi00'));
        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function get_reservations_returns_an_ok_response()
    {
//        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\Users\User::class)->create();
        $reservation = factory(Reservation::class)->create();
        $reservation->user()->associate($user);
        $reservation->save();
        $response = $this->actingAs($user)->get(route('user.reservations'));

        $response->assertOk();
        $response->assertViewIs('client.user.reservations');
        $response->assertViewHas('reservations');
        foreach ($user->reservations as $res) {
            $response->assertSee($res->start_at->isoFormat('LLL'));
            $response->assertSee($res->end_at->isoFormat('LLL'));
        }

    }

    // test cases...
}
